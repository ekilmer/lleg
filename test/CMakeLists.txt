cmake_minimum_required(VERSION 3.14)

project(llegTests LANGUAGES CXX)

include(../cmake/project-is-top-level.cmake)
include(../cmake/folders.cmake)
include(../cmake/windows-set-path.cmake)

if(PROJECT_IS_TOP_LEVEL)
  find_package(lleg REQUIRED)
  enable_testing()
endif()

# Add test executables with assertions
add_executable(lleg_test source/lleg_test.cpp)
target_link_libraries(lleg_test PRIVATE lleg::lleg)
target_compile_features(lleg_test PRIVATE cxx_std_17)

add_test(NAME lleg_test COMMAND lleg_test)
windows_set_path(lleg_test lleg::lleg)

# Add test tool executables for LIT
add_executable(lleg_tool_test tool-src/lleg_tool_test.cpp)
target_link_libraries(lleg_tool_test PRIVATE lleg::lleg)
target_compile_features(lleg_tool_test PRIVATE cxx_std_17)

# Setup LLVM's own LIT testing
find_package(LLVM 13 CONFIG REQUIRED)
if(EXISTS "${LLVM_DEFAULT_EXTERNAL_LIT}")
  find_package(Python3 REQUIRED COMPONENTS Interpreter)
  set(llvm_lit Python3::Interpreter "${LLVM_DEFAULT_EXTERNAL_LIT}")
  message(STATUS "Using found lit: ${llvm_lit}")
else()
  find_program(llvm_lit NAMES llvm-lit lit DOC "LLVM LIT testing tool")
  message(STATUS "Using searched lit: ${llvm_lit}")
endif()

# Setup replacement variables
set(site_cfg_input "${CMAKE_CURRENT_SOURCE_DIR}/lit.site.cfg.py.in")
set(site_cfg_in_header  "## Autogenerated from ${site_cfg_input}\n## Do not edit!")
set(tool_test_exe $<TARGET_FILE:lleg_tool_test>)
set(pass_lib)
if(NOT WIN32)
  set(pass_lib $<TARGET_FILE:lleg::llegPass>)
endif()

# Replace CMake variables
configure_file("${site_cfg_input}"
  "${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg.py.in" @ONLY
)
# Replace generator expressions
file(GENERATE
  OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/lit.site.cfg.py"
  INPUT "${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg.py.in"
)

# Add LIT tests to CTest
# NOTE: This isn't the most effective when running ctest in parallel because
# LIT is already parallelized, so there could be resource contention.
add_test(
  NAME lleg_test-lit
  COMMAND ${llvm_lit} ${LLVM_LIT_ARGS} lit
  WORKING_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>"
)

add_folders(Test)
