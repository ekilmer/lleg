cmake_minimum_required(VERSION 3.14)

project(llegTests LANGUAGES CXX)

include(../cmake/project-is-top-level.cmake)
include(../cmake/folders.cmake)
include(../cmake/windows-set-path.cmake)

if(PROJECT_IS_TOP_LEVEL)
  find_package(lleg REQUIRED)
  enable_testing()
endif()

# Add test executables with assertions
add_executable(lleg_test source/lleg_test.cpp)
target_link_libraries(lleg_test PRIVATE lleg::lleg)
target_compile_features(lleg_test PRIVATE cxx_std_17)

add_test(NAME lleg_test COMMAND lleg_test)
windows_set_path(lleg_test lleg::lleg)

# Add test tool executables for LIT
add_executable(lleg_tool_test tool-src/lleg_tool_test.cpp)
target_link_libraries(lleg_tool_test PRIVATE lleg::lleg)
target_compile_features(lleg_tool_test PRIVATE cxx_std_17)
# Needed for compatibility with ASAN loadable modules when running in LIT test.
target_link_options(lleg_tool_test PRIVATE $<$<AND:$<CONFIG:Sanitize>,$<C_COMPILER_ID:Clang>>:-shared-libsan>)

# Setup LLVM's own LIT testing
find_package(LLVM 13 CONFIG REQUIRED)
if(EXISTS "${LLVM_DEFAULT_EXTERNAL_LIT}")
  find_package(Python3 REQUIRED COMPONENTS Interpreter)
  set(llvm_lit Python3::Interpreter "${LLVM_DEFAULT_EXTERNAL_LIT}")
  message(STATUS "Using found lit: ${llvm_lit}")
else()
  find_program(llvm_lit NAMES llvm-lit lit DOC "LLVM LIT testing tool")
  message(STATUS "Using searched lit: ${llvm_lit}")
endif()

# LLVM Static libs for lleg_tool_test
set(lleg_tool_test_llvm_libs LLVMCore LLVMPasses LLVMIRReader LLVMSupport)
if(NOT BUILD_SHARED_LIBS)
    target_link_libraries(lleg_tool_test
        PRIVATE ${lleg_tool_test_llvm_libs}
    )
else()
    if(TARGET LLVM)
        target_link_libraries(lleg_tool_test
            PRIVATE LLVM
        )
    else()
        # message(FATAL_ERROR "Could not find shared LLVM library for linking")
        target_link_libraries(lleg_tool_test
            PRIVATE ${lleg_tool_test_llvm_libs}
        )
    endif()
endif()

# Setup replacement variables
set(site_cfg_input "${CMAKE_CURRENT_SOURCE_DIR}/lit.site.cfg.py.in")
set(site_cfg_in_header  "## Autogenerated from ${site_cfg_input}\n## Do not edit!")
set(tool_test_exe $<TARGET_FILE:lleg_tool_test>)
set(pass_lib)
if(NOT WIN32)
  set(pass_lib $<TARGET_FILE:lleg::llegPass>)
endif()

# Replace CMake variables
configure_file("${site_cfg_input}"
  "${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg.py.in" @ONLY
)
# Replace generator expressions
file(GENERATE
  OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/lit.site.cfg.py"
  INPUT "${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg.py.in"
)

# Add LIT tests to CTest
# NOTE: This isn't the most effective when running ctest in parallel because
# LIT is already parallelized, so there could be resource contention.
add_test(
  NAME lleg_test-lit
  COMMAND ${llvm_lit} ${LLVM_LIT_ARGS} lit
  WORKING_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>"
)

# Needed for shared sanitizer libraries
# File names come from https://stackoverflow.com/a/55692977
set(sanitizer_path)
if("${CMAKE_C_COMPILER_ID}" STREQUAL "Clang")
  execute_process(COMMAND
    "${CMAKE_C_COMPILER}" -print-file-name=libclang_rt.asan-x86_64.so
    OUTPUT_VARIABLE sanitizer_path
    OUTPUT_STRIP_TRAILING_WHITESPACE
  )
elseif("${CMAKE_C_COMPILER_ID}" STREQUAL "GNU")
  # TODO: This doesn't work on Fedora 35... It gives back a linker script at
  # the path: /usr/lib/gcc/x86_64-redhat-linux/11/libasan.so
  # With content: INPUT ( /usr/lib64/libasan.so.6.0.0 )
  # execute_process(COMMAND
  #   "${CMAKE_C_COMPILER}" -print-file-name=libasan.so
  #   OUTPUT_VARIABLE sanitizer_path
  #   OUTPUT_STRIP_TRAILING_WHITESPACE
  # )
  set(sanitizer_path "/usr/lib64/libasan.so.6.0.0")
endif()
# NOTE: Using LD_PRELOAD can catch all sorts of unrelated leaks during testing.
# See (and possibly adjust) lsan_suppressions.txt for more info
set_tests_properties(lleg_test-lit PROPERTIES
  ENVIRONMENT
    "$<$<CONFIG:Sanitize>:LD_PRELOAD=${sanitizer_path};LSAN_OPTIONS=suppressions=${CMAKE_CURRENT_LIST_DIR}/lit/lsan_suppressions.txt>"
)
windows_set_path(lleg_test-lit lleg::lleg)

add_folders(Test)
