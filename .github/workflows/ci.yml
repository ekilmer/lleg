name: Continuous Integration

on:
  push:

  pull_request:
    branches:
    - main

env:
  # "Source" is set in the vcpkg install step
  VCPKG_BINARY_SOURCES: 'clear;nuget,GitHub,readwrite;nugettimeout,3601'
  VCPKG_USE_NUGET_CACHE: 1


jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - uses: actions/setup-python@v2
      with: { python-version: "3.8" }

    - name: Install codespell
      run: pip3 install codespell

    - name: Lint
      run: cmake -DFORMAT_COMMAND=clang-format-12 -P cmake/lint.cmake

    - name: Spell check
      if: always()
      run: cmake -P cmake/spell.cmake

  coverage:
    needs: [lint]

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Setup vcpkg
      run: |
        echo "VCPKG_ROOT=${VCPKG_INSTALLATION_ROOT}" >> "${GITHUB_ENV}"
        git -C "${VCPKG_INSTALLATION_ROOT}" stash
        git -C "${VCPKG_INSTALLATION_ROOT}" pull

    - name: Install LCov
      run: sudo apt-get update -q
        && sudo apt-get install lcov -q -y

    - name: Configure
      run: |
        pipx install lit==13.0.0

        # Setup NuGet authentication
        mono "$(vcpkg fetch nuget | tail -n 1)" \
          sources add \
          -source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
          -storepasswordincleartext \
          -name "GitHub" \
          -username "${{ github.repository_owner }}" \
          -password "${{ secrets.GITHUB_TOKEN }}" || true

        mono "$(vcpkg fetch nuget | tail -n 1)" \
          sources update \
          -source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
          -storepasswordincleartext \
          -name "GitHub" \
          -username "${{ github.repository_owner }}" \
          -password "${{ secrets.GITHUB_TOKEN }}"

        mono "$(vcpkg fetch nuget | tail -n 1)" \
          setapikey \
          -source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
          "${{ secrets.GITHUB_TOKEN }}"

        cmake --preset=ci-coverage -DVCPKG_INSTALL_OPTIONS=--debug

    - name: Build
      run: cmake --build build/coverage -j 2

    - name: Test
      working-directory: build/coverage
      run: ctest --output-on-failure

    - name: Process coverage info
      run: cmake --build build/coverage -t coverage

    - name: Submit to codecov.io
      uses: codecov/codecov-action@v2
      with:
        file: build/coverage/coverage.info

  sanitize:
    needs: [lint]

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Setup vcpkg
      run: |
        echo "VCPKG_ROOT=${VCPKG_INSTALLATION_ROOT}" >> "${GITHUB_ENV}"
        git -C "${VCPKG_INSTALLATION_ROOT}" stash
        git -C "${VCPKG_INSTALLATION_ROOT}" pull

    - name: Configure
      env: { CXX: clang++, CC: clang }
      run: |
        pipx install lit==13.0.0

        # Setup NuGet authentication
        mono "$(vcpkg fetch nuget | tail -n 1)" \
          sources add \
          -source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
          -storepasswordincleartext \
          -name "GitHub" \
          -username "${{ github.repository_owner }}" \
          -password "${{ secrets.GITHUB_TOKEN }}" || true

        mono "$(vcpkg fetch nuget | tail -n 1)" \
          sources update \
          -source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
          -storepasswordincleartext \
          -name "GitHub" \
          -username "${{ github.repository_owner }}" \
          -password "${{ secrets.GITHUB_TOKEN }}"

        mono "$(vcpkg fetch nuget | tail -n 1)" \
          setapikey \
          -source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
          "${{ secrets.GITHUB_TOKEN }}"

        cmake --preset=ci-sanitize -DVCPKG_INSTALL_OPTIONS=--debug

    - name: Build
      run: cmake --build build/sanitize -j 2

    - name: Test
      working-directory: build/sanitize
      env:
        ASAN_OPTIONS: "strict_string_checks=1:\
          detect_stack_use_after_return=1:\
          check_initialization_order=1:\
          strict_init_order=1:\
          detect_leaks=1"
        UBSAN_OPTIONS: print_stacktrace=1
      run: ctest --output-on-failure

  test:
    needs: [lint]

    strategy:
      fail-fast: false
      matrix:
        os: [macos-11, ubuntu-20.04, windows-2022]

        type: [shared, static]

        include:
        - { type: shared, shared: YES }
        - { type: static, shared: NO }

          # For vcpkg host triplet env variable
        - { os: macos-11, os_name: osx }
        - { os: ubuntu-20.04, os_name: linux }
        - { os: windows-2022, os_name: windows }
        exclude:
        # LLVM does not support dynamic linking on Windows. This might change
        # if LLVM_BUILD_LLVM_DYLIB option is ever supported on Windows
        - { os: windows-2022, type: shared }

    runs-on: ${{ matrix.os }}

    env:
      VCPKG_HOST_TRIPLET: "x64-${{ matrix.os_name }}-release"

    steps:
    - uses: actions/checkout@v2

    - name: Setup vcpkg
      shell: bash
      run: |
        echo "VCPKG_ROOT=${VCPKG_INSTALLATION_ROOT}" >> "${GITHUB_ENV}"
        git -C "${VCPKG_INSTALLATION_ROOT}" stash
        git -C "${VCPKG_INSTALLATION_ROOT}" pull

    - name: Install Dependencies
      run: pipx install lit==13.0.0

    - name: Install static analyzers
      if: startsWith(matrix.os, 'ubuntu')
      run: sudo apt-get install clang-tidy cppcheck -y -q

    - name: Setup Visual Studio 64 bit
      if: startsWith(matrix.os, 'windows')
      uses: ilammy/msvc-dev-cmd@v1.10.0
      with:
        arch: x64

    - name: Configure Unix
      if: "!startsWith(matrix.os, 'windows')"
      run: |
        # Setup NuGet authentication
        mono "$(vcpkg fetch nuget | tail -n 1)" \
          sources add \
          -source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
          -storepasswordincleartext \
          -name "GitHub" \
          -username "${{ github.repository_owner }}" \
          -password "${{ secrets.GITHUB_TOKEN }}" || true

        mono "$(vcpkg fetch nuget | tail -n 1)" \
          sources update \
          -source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
          -storepasswordincleartext \
          -name "GitHub" \
          -username "${{ github.repository_owner }}" \
          -password "${{ secrets.GITHUB_TOKEN }}"

        mono "$(vcpkg fetch nuget | tail -n 1)" \
          setapikey \
          -source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
          "${{ secrets.GITHUB_TOKEN }}"

        cmake --preset=ci-${{ matrix.os }} \
          -DBUILD_SHARED_LIBS=${{ matrix.shared }} \
          -DVCPKG_INSTALL_OPTIONS=--debug

    - name: Configure Windows
      if: startsWith(matrix.os, 'windows')
      run: |
        # Setup NuGet authentication
        & "$(vcpkg fetch nuget | select -last 1)" `
          sources add `
          -source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" `
          -storepasswordincleartext `
          -name "GitHub" `
          -username "${{ github.repository_owner }}" `
          -password "${{ secrets.GITHUB_TOKEN }}" || true

        & "$(vcpkg fetch nuget | select -last 1)" `
          sources update `
          -source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" `
          -storepasswordincleartext `
          -name "GitHub" `
          -username "${{ github.repository_owner }}" `
          -password "${{ secrets.GITHUB_TOKEN }}"

        & "$(vcpkg fetch nuget | select -last 1)" `
          setapikey `
          -source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" `
          "${{ secrets.GITHUB_TOKEN }}"

        cmake --preset=ci-${{ matrix.os }} `
          -DBUILD_SHARED_LIBS=${{ matrix.shared }} `
          -DVCPKG_INSTALL_OPTIONS=--debug

    - name: Build
      run: cmake --build build --config RelWithDebInfo -j 2

    - name: Install
      run: cmake --install build --config RelWithDebInfo --prefix prefix

    - name: Test Unix
      if: "!startsWith(matrix.os, 'windows')"
      working-directory: build
      run: ctest --output-on-failure --verbose -C RelWithDebInfo

      # Getting weird segfaults on Windows with CTest and lit that I can't reproduce locally
    - name: Test Windows
      if: startsWith(matrix.os, 'windows')
      working-directory: build
      run: |
        cd test/RelWithDebInfo
        lit -vv lit
        cd ../../

        ctest --output-on-failure --verbose -C RelWithDebInfo --exclude-regex ".*-lit"

  docs:
    # Deploy docs only when builds succeed
    needs: [sanitize, test]

    runs-on: ubuntu-latest

    # To enable, first you have to create an orphaned gh-pages branch:
    #
    #    git switch --orphan gh-pages
    #    git commit --allow-empty -m "Initial commit"
    #    git push -u origin gh-pages
    #
    # Edit the <name> placeholder below to your GitHub name, so this action
    # runs only in your repository and no one else's fork. After these, delete
    # this comment and the last line in the conditional below.
    # If you do not wish to use GitHub Pages for deploying documentation, then
    # simply delete this job similarly to the coverage one.
    if: github.ref == 'refs/heads/main'
      && github.event_name == 'push'
      && github.repository_owner == 'ekilmer'
      && false

    steps:
    - uses: actions/checkout@v2

    - uses: actions/setup-python@v2
      with: { python-version: "3.8" }

    - name: Install m.css dependencies
      run: pip3 install jinja2 Pygments

    - name: Install Doxygen
      run: sudo apt-get update -q
        && sudo apt-get install doxygen -q -y

    - name: Build docs
      run: cmake -B build "-DCMAKE_PROJECT_INCLUDE=$PWD/cmake/docs.cmake"
        && cmake --build build --target docs

    - name: Deploy docs
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: build/docs/html
